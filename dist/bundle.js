/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Controller/Controller.ts":
/*!**************************************!*\
  !*** ./src/Controller/Controller.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

    eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Controller = void 0;\nconst Table_1 = __webpack_require__(/*! ../Model/Table */ \"./src/Model/Table.ts\");\nconst Player_1 = __webpack_require__(/*! ../Model/Player */ \"./src/Model/Player.ts\");\nconst View_1 = __webpack_require__(/*! ../View/View */ \"./src/View/View.ts\");\nclass Controller {\n    static startGame() {\n        View_1.View.renderLandingPage();\n        let inputName = document.querySelectorAll(\"#inputName\")[0];\n        let selectGameType = document.querySelectorAll(\"#selectGameType\")[0];\n        let startGame = document.querySelectorAll(\"#startGame\")[0];\n        let loginGame = document.querySelectorAll(\"#loginGame\")[0];\n        startGame.addEventListener(\"click\", function () {\n            if (inputName.value === \"\") {\n                alert(\"名前を入力してください\");\n            }\n            else if (selectGameType.value === \"poker\") {\n                alert(\"準備中\");\n            }\n            else {\n                let table = new Table_1.Table(selectGameType.value);\n                let user;\n                if (inputName.name === \"ai\") {\n                    user = new Player_1.Player(\"ai\", \"ai\", selectGameType.value);\n                }\n                else {\n                    user = new Player_1.Player(inputName.value, \"user\", selectGameType.value);\n                }\n                table.set_player = user;\n                if (selectGameType.value === \"blackjack\") {\n                    let bot1 = new Player_1.Player(\"ai1\", \"ai\", \"blackjack\");\n                    let bot2 = new Player_1.Player(\"ai2\", \"ai\", \"blackjack\");\n                    table.set_player = bot1;\n                    table.set_player = bot2;\n                }\n                View_1.View.renderTablePage(table);\n            }\n        });\n        loginGame.addEventListener(\"click\", function () {\n            let user;\n            if (inputName.value === \"\") {\n                alert(\"名前を入力してください\");\n            }\n            else {\n                let saveChips = localStorage.getItem(inputName.value);\n                if (saveChips === null) {\n                    alert(\"データはありません。\");\n                    return;\n                }\n                else {\n                    saveChips = parseInt(saveChips);\n                    user = new Player_1.Player(inputName.value, \"user\", selectGameType.value, saveChips);\n                }\n                let table = new Table_1.Table(selectGameType.value);\n                table.set_player = user;\n                if (selectGameType.value === \"blackjack\") {\n                    let bot1 = new Player_1.Player(\"ai1\", \"ai\", \"blackjack\");\n                    let bot2 = new Player_1.Player(\"ai2\", \"ai\", \"blackjack\");\n                    table.set_player = bot1;\n                    table.set_player = bot2;\n                }\n                View_1.View.renderTablePage(table);\n            }\n        });\n    }\n    static addBetsEvent(table) {\n        let decreaseBets = document.querySelectorAll(\".decreaseBets\");\n        let increaseBets = document.querySelectorAll(\".increaseBets\");\n        let inputBets = document.querySelectorAll(\".inputBets\");\n        for (let i = 0; i < decreaseBets.length; i++) {\n            Controller.addBetsEventHelper(inputBets[i], table.get_betDenomination[i], decreaseBets[i], table.turnPlayer.get_chips);\n        }\n        for (let i = 0; i < increaseBets.length; i++) {\n            Controller.addBetsEventHelper(inputBets[i], table.get_betDenomination[i], increaseBets[i], table.turnPlayer.get_chips);\n        }\n    }\n    static addBetsEventHelper(inputBets, betAmount, betButton, chips) {\n        if (betButton.innerHTML === \"-\") {\n            betButton.addEventListener(\"click\", function () {\n                if (parseInt(inputBets.value) > 0) {\n                    inputBets.value = String(parseInt(inputBets.value) - betAmount);\n                }\n            });\n        }\n        else if (betButton.innerHTML === \"+\") {\n            betButton.addEventListener(\"click\", function () {\n                if (parseInt(inputBets.value) < chips && Controller.totalBets() < chips) {\n                    inputBets.value = String(parseInt(inputBets.value) + betAmount);\n                }\n            });\n        }\n    }\n    static addBetSubmitEvent(table) {\n        let submitBetsButton = document.querySelectorAll(\"#submitBetsButton\")[0];\n        submitBetsButton.addEventListener(\"click\", function () {\n            let totalBets = Controller.totalBets();\n            if (totalBets === 0) {\n                alert(\"Chipを賭けてください\");\n            }\n            else {\n                table.haveTurn(totalBets);\n                View_1.View.renderTablePage(table);\n            }\n        });\n    }\n    static addActionEvent(table) {\n        let actionButton = document.querySelectorAll(\".actionButton\");\n        let doubleButton = document.querySelectorAll(\"#double\")[0];\n        let surrenderButton = document.querySelectorAll(\"#surrender\")[0];\n        if (table.get_players[0].get_hand.length !== 2) {\n            doubleButton.disabled = true;\n            surrenderButton.disabled = true;\n        }\n        for (let i = 0; i < actionButton.length; i++) {\n            actionButton[i].addEventListener(\"click\", function () {\n                console.log(actionButton[i].value);\n                table.haveTurn(actionButton[i].value);\n                View_1.View.renderTablePage(table);\n            });\n        }\n    }\n    static addCloseResultOrRuleEvent(table) {\n        let closeResults = document.querySelectorAll(\"#closeResults\")[0];\n        let roundResults = document.querySelectorAll(\"#roundResults\")[0];\n        let closeRule = document.querySelectorAll(\"#closeRule\")[0];\n        let gameRule = document.querySelectorAll(\"#gameRule\")[0];\n        closeResults.addEventListener(\"click\", function () {\n            if (table.get_gamePhase === \"roundOver\") {\n                table.set_gamePhase = \"stopOrContinue\";\n                View_1.View.renderTablePage(table);\n            }\n            else {\n                View_1.View.displayNone(roundResults);\n            }\n        });\n        closeRule.addEventListener(\"click\", function () {\n            View_1.View.displayNone(gameRule);\n        });\n    }\n    static addStopOrContinueGameEvent(table) {\n        let continueButton = document.querySelectorAll(\"#continueGameButton\")[0];\n        let stopButton = document.querySelectorAll(\"#stopGameButton\")[0];\n        continueButton.addEventListener(\"click\", function () {\n            table.nextGame();\n            View_1.View.renderTablePage(table);\n        });\n        stopButton.addEventListener(\"click\", function () {\n            let userName = table.get_players[0].get_name;\n            let userChips = String(table.get_players[0].get_chips);\n            localStorage.setItem(userName, userChips);\n            alert(\"Saved your data, Please put the same when you login.\");\n            Controller.startGame();\n        });\n    }\n    static addNewGameEvent() {\n        let newGameButton = document.querySelectorAll(\"#newGameButton\")[0];\n        newGameButton.addEventListener(\"click\", function () {\n            Controller.startGame();\n        });\n    }\n    static addRuluAndLogCheckEvent() {\n        let ruleButton = document.querySelectorAll(\"#ruleButton\")[0];\n        let gameLogButton = document.querySelectorAll(\"#gameLogButton\")[0];\n        let resultLog = document.querySelectorAll(\"#roundResults\")[0];\n        let gameRule = document.querySelectorAll(\"#gameRule\")[0];\n        ruleButton.addEventListener(\"click\", function () {\n            View_1.View.displayBlock(gameRule);\n        });\n        gameLogButton.addEventListener(\"click\", function () {\n            View_1.View.displayBlock(resultLog);\n        });\n    }\n    static totalBets() {\n        let totalBets = 0;\n        let inputBets = document.querySelectorAll(\".inputBets\");\n        for (let i = 0; i < inputBets.length; i++) {\n            totalBets += parseInt(inputBets[i].value);\n        }\n        return totalBets;\n    }\n}\nexports.Controller = Controller;\n\n\n//# sourceURL=webpack://black-jack/./src/Controller/Controller.ts?");

    /***/ }),
    
    /***/ "./src/Model/Card.ts":
    /*!***************************!*\
      !*** ./src/Model/Card.ts ***!
      \***************************/
    /***/ ((__unused_webpack_module, exports) => {
    
    eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Card = void 0;\nclass Card {\n    constructor(_suit, _rank) {\n        this._suit = _suit;\n        this._rank = _rank;\n    }\n    get suit() {\n        return this._suit;\n    }\n    get rank() {\n        return this._rank;\n    }\n    get get_rankNumber() {\n        if (this._rank === \"A\")\n            return 11;\n        else if (this._rank === \"J\" || this._rank === \"Q\" || this._rank === \"K\")\n            return 10;\n        else\n            return parseInt(this._rank);\n    }\n}\nexports.Card = Card;\n\n\n//# sourceURL=webpack://black-jack/./src/Model/Card.ts?");
    
    /***/ }),
    
    /***/ "./src/Model/Deck.ts":
    /*!***************************!*\
      !*** ./src/Model/Deck.ts ***!
      \***************************/
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
    
    eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Deck = void 0;\nconst Card_1 = __webpack_require__(/*! ./Card */ \"./src/Model/Card.ts\");\nclass Deck {\n    constructor(_gameType) {\n        this._cards = [];\n        this._gameType = _gameType;\n        this._cards = _gameType === \"blackjack\" ? Deck.initialBlackJack() : [];\n    }\n    static initialBlackJack() {\n        let _cards = [];\n        for (let suit of Deck.suits) {\n            for (let rank of Deck.ranks) {\n                let card = new Card_1.Card(suit, rank);\n                _cards.push(card);\n            }\n        }\n        return _cards;\n    }\n    shuffle() {\n        for (let i = 0; i < this._cards.length; i++) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = this._cards[i];\n            this._cards[i] = this._cards[j];\n            this._cards[j] = temp;\n        }\n    }\n    resetDeck() {\n        if (this._gameType === \"blackjack\") {\n            this._cards = Deck.initialBlackJack();\n            this.shuffle();\n        }\n    }\n    drawOne() {\n        return this._cards.pop();\n    }\n}\nexports.Deck = Deck;\nDeck.suits = [\"heart\", \"diamond\", \"clover\", \"spade\"];\nDeck.ranks = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"];\n\n\n//# sourceURL=webpack://black-jack/./src/Model/Deck.ts?");
    
    /***/ }),
    
    /***/ "./src/Model/GameDecision.ts":
    /*!***********************************!*\
      !*** ./src/Model/GameDecision.ts ***!
      \***********************************/
    /***/ ((__unused_webpack_module, exports) => {
    
    eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GameDecision = void 0;\nclass GameDecision {\n    constructor(action, amount) {\n        this.action = action;\n        this.amount = amount;\n    }\n    get get_action() {\n        return this.action;\n    }\n    get get_amount() {\n        return this.amount;\n    }\n}\nexports.GameDecision = GameDecision;\n\n\n//# sourceURL=webpack://black-jack/./src/Model/GameDecision.ts?");
    
    /***/ }),
    
    /***/ "./src/Model/Player.ts":
    /*!*****************************!*\
      !*** ./src/Model/Player.ts ***!
      \*****************************/
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
    
    eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Player = void 0;\nconst GameDecision_1 = __webpack_require__(/*! ./GameDecision */ \"./src/Model/GameDecision.ts\");\nclass Player {\n    constructor(_name, _type, _gameType, _chips = 400) {\n        this._name = _name;\n        this._type = _type;\n        this._gameType = _gameType;\n        this._chips = _chips;\n        this._hand = [];\n        this._bet = 0;\n        this._winAmount = 0;\n        this._gameStatus = this.type === \"house\" ? \"WaitingForBets\" : \"betting\";\n    }\n    get get_name() {\n        return this._name;\n    }\n    get get_chips() {\n        return this._chips;\n    }\n    get get_bet() {\n        return this._bet;\n    }\n    get get_winAmount() {\n        return this._winAmount;\n    }\n    get get_gameStatus() {\n        return this._gameStatus;\n    }\n    get type() {\n        return this._type;\n    }\n    set set_bet(amount) {\n        this._bet = amount;\n    }\n    set set_winAmount(amount) {\n        this._winAmount = amount;\n    }\n    set set_gameStatus(status) {\n        this._gameStatus = status;\n    }\n    set set_chips(n) {\n        this._chips += n;\n    }\n    promptPlayer(userData) {\n        if (this._type === \"ai\" || this._type === \"house\" || userData === null)\n            return this.get_aiDecision;\n        if (this._gameStatus === \"betting\") {\n            return new GameDecision_1.GameDecision(\"bet\", userData);\n        }\n        else {\n            return new GameDecision_1.GameDecision(userData, this._bet);\n        }\n    }\n    get get_aiDecision() {\n        const betDenominations = [5, 20, 50, 100];\n        let betDenominationCount = Player.getRandomInteger(1, 4);\n        let betIndex = Player.getRandomInteger(0, 3);\n        let bet = 0;\n        if (this._gameStatus === \"betting\") {\n            for (let i = betDenominationCount; i > 0; i--) {\n                bet += betDenominations[betIndex];\n            }\n            return new GameDecision_1.GameDecision(\"bet\", bet);\n        }\n        else {\n            if (this.get_handScore < 15) {\n                return new GameDecision_1.GameDecision(\"hit\", this._bet);\n            }\n            else {\n                return new GameDecision_1.GameDecision(\"stand\", this._bet);\n            }\n        }\n    }\n    get get_hand() {\n        return this._hand;\n    }\n    set push_card(card) {\n        this._hand.push(card);\n    }\n    set reset_card(cards) {\n        this._hand = cards;\n    }\n    get get_handScore() {\n        let count = 0;\n        let aces = [];\n        for (let i = 0; i < this._hand.length; i++) {\n            count += this._hand[i].get_rankNumber;\n            if (this._hand[i].rank === \"A\")\n                aces.push(\"A\");\n        }\n        while (count > 21 && aces.length > 0) {\n            aces.pop();\n            count -= 10;\n        }\n        return count;\n    }\n    static getRandomInteger(min, max) {\n        return Math.floor(Math.random() * (max + 1 - min)) + min;\n    }\n}\nexports.Player = Player;\n\n\n//# sourceURL=webpack://black-jack/./src/Model/Player.ts?");
    
    /***/ }),
    
    /***/ "./src/Model/Table.ts":
    /*!****************************!*\
      !*** ./src/Model/Table.ts ***!
      \****************************/
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
    
    eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Table = void 0;\nconst Player_1 = __webpack_require__(/*! ./Player */ \"./src/Model/Player.ts\");\nconst Deck_1 = __webpack_require__(/*! ./Deck */ \"./src/Model/Deck.ts\");\nclass Table {\n    constructor(_gameType, _betDenomination = [5, 20, 50, 100]) {\n        this._players = [];\n        this._gamePhase = 'betting';\n        this._gameType = _gameType;\n        this._betDenomination = _betDenomination;\n        this._deck = new Deck_1.Deck(this._gameType);\n        this._house = new Player_1.Player('house', 'house', this._gameType);\n        this._resultLog = [];\n        this._turnCounter = 0;\n        this._roundConuter = 0;\n    }\n    get get_house() {\n        return this._house;\n    }\n    get get_players() {\n        return this._players;\n    }\n    get get_roundCounter() {\n        return this._roundConuter;\n    }\n    get get_betDenomination() {\n        return this._betDenomination;\n    }\n    set increase_turnCounter(n) {\n        this._turnCounter += n;\n    }\n    set set_turnCounter(n) {\n        this._turnCounter = n;\n    }\n    set increase_roundCounter(n) {\n        this._roundConuter += n;\n    }\n    set set_gamePhase(gamePhase) {\n        this._gamePhase = gamePhase;\n    }\n    set set_player(player) {\n        this._players.push(player);\n    }\n    get get_gamePhase() {\n        return this._gamePhase;\n    }\n    get get_resultLog() {\n        return this._resultLog;\n    }\n    evaluateMove(player, userData) {\n        if (player.get_gameStatus === \"bust\" || player.get_gameStatus === \"surrender\" || player.get_gameStatus === \"stand\" || player.get_gameStatus === \"double\")\n            return;\n        let gameDecision = player.promptPlayer(userData);\n        if (gameDecision.get_action === \"bet\") {\n            player.set_bet = gameDecision.get_amount;\n            player.set_winAmount = gameDecision.get_amount;\n            player.set_gameStatus = \"bet\";\n        }\n        if (gameDecision.get_action === \"stand\") {\n            if (player.get_hand.length === 2 && player.get_handScore === 21)\n                player.set_gameStatus = \"blackjack\";\n            else {\n                player.set_gameStatus = \"stand\";\n            }\n        }\n        if (gameDecision.get_action === \"hit\") {\n            player.set_gameStatus = \"hit\";\n            player.push_card = this._deck.drawOne();\n            if (player.get_handScore > 21)\n                player.set_gameStatus = \"bust\";\n        }\n        if (gameDecision.get_action === \"double\") {\n            player.set_bet = player.get_bet * 2;\n            player.set_winAmount = player.get_winAmount * 2;\n            player.push_card = this._deck.drawOne();\n            player.set_gameStatus = \"double\";\n            if (player.get_handScore > 21)\n                player.set_gameStatus = \"bust\";\n        }\n        if (gameDecision.get_action === \"surrender\") {\n            player.set_bet = Math.floor(player.get_bet / 2);\n            player.set_winAmount = Math.floor(player.get_winAmount / 2);\n            player.set_gameStatus = \"surrender\";\n        }\n    }\n    blackjackEvaluateAndGetRoundResults() {\n        let s = \"\";\n        for (let i = 0; i < this._players.length; i++) {\n            let currentPlayer = this._players[i];\n            if (currentPlayer.get_gameStatus === \"bust\" || currentPlayer.get_gameStatus === \"surrender\") {\n                s +=\n                    `\n          <div class=\"d-flex\">\n            <p class=\"text-danger\">Lose</p>\n            <p>|name: ${currentPlayer.get_name}, action: ${currentPlayer.get_gameStatus}, bet: ${currentPlayer.get_bet}, won: -${currentPlayer.get_winAmount}|</p>\n          </div>\n        `;\n                currentPlayer.set_chips = -currentPlayer.get_winAmount;\n            }\n            else if ((this._house.get_gameStatus === \"blackjack\" && currentPlayer.get_gameStatus === \"blackjack\") || (this._house.get_gameStatus === \"bust\" && (currentPlayer.get_gameStatus === \"surrender\" || currentPlayer.get_gameStatus === \"bust\"))) {\n                s +=\n                    `\n        <div class=\"d-flex\">\n        <p>Draw</p> \n          <p >|name: ${currentPlayer.get_name}, action: ${currentPlayer.get_gameStatus}, bet: ${currentPlayer.get_bet}, won: 0|</p>\n        </div>\n        `;\n            }\n            else if (currentPlayer.get_gameStatus === \"blackjack\") {\n                s +=\n                    `\n        <div class=\"d-flex\">\n          <p class=\"text-info\">BlackJack</p>\n          <p>\n          |name: ${currentPlayer.get_name}, action: ${currentPlayer.get_gameStatus}, bet: ${currentPlayer.get_bet}, won: ${currentPlayer.get_winAmount * 1.5}|\n          </p>\n        </div>\n        `;\n                currentPlayer.set_chips = currentPlayer.get_winAmount * 1.5;\n            }\n            else if (this._house.get_gameStatus === \"bust\") {\n                s +=\n                    `\n        <div class=\"d-flex\">\n          <p class=\"text-success\">Win</p>\n          <p>|name: ${currentPlayer.get_name}, action: ${currentPlayer.get_gameStatus}, bet: ${currentPlayer.get_bet}, won: ${currentPlayer.get_winAmount}|</p>\n        </div>\n        `;\n            }\n            else {\n                if (this._house.get_handScore < currentPlayer.get_handScore) {\n                    s +=\n                        `\n          <div class=\"d-flex\">\n            <p class=\"text-success\">Win</p>\n            <p>|name: ${currentPlayer.get_name}, action: ${currentPlayer.get_gameStatus}, bet: ${currentPlayer.get_bet}, won: ${currentPlayer.get_winAmount}|</p>\n          </div>\n          `;\n                    currentPlayer.set_chips = currentPlayer.get_winAmount;\n                }\n                else if (this._house.get_handScore === currentPlayer.get_handScore) {\n                    s +=\n                        `\n          <div class=\"d-flex\">\n          <p>Draw</p> \n            <p >|name: ${currentPlayer.get_name}, action: ${currentPlayer.get_gameStatus}, bet: ${currentPlayer.get_bet}, won: 0|</p>\n          </div>\n          `;\n                }\n                else {\n                    s +=\n                        `\n           <div class=\"d-flex\">\n             <p class=\"text-danger\">Lose</p>\n             <p>|name: ${currentPlayer.get_name}, action: ${currentPlayer.get_gameStatus}, bet: ${currentPlayer.get_bet}, won: -${currentPlayer.get_winAmount}|</p>\n           </div>\n         `;\n                    currentPlayer.set_chips = -currentPlayer.get_winAmount;\n                }\n            }\n        }\n        this._resultLog.push(s);\n    }\n    blackjackAssignPlayerHands() {\n        this._deck.shuffle();\n        for (let i = 0; i < 2; i++) {\n            this._house.push_card = this._deck.drawOne();\n        }\n        for (let i = 0; i < this._players.length; i++) {\n            let j = 2;\n            let currentPlayer = this._players[i];\n            while (j > 0) {\n                currentPlayer.push_card = this._deck.drawOne();\n                j--;\n            }\n        }\n    }\n    blackjackClearPlayerHandsAndBets() {\n        for (let i = 0; i < this._players.length; i++) {\n            let currentPlayer = this._players[i];\n            if (currentPlayer.get_hand.length > 0)\n                currentPlayer.reset_card = [];\n        }\n        if (this._house.get_hand.length > 0)\n            this._house.reset_card = [];\n    }\n    get turnPlayer() {\n        let index = this._turnCounter % this._players.length;\n        return this._players[index];\n    }\n    haveTurn(userData) {\n        let currentPlayer = this.turnPlayer;\n        if (this._gamePhase === \"betting\") {\n            if (this.onFirstPlayer()) {\n                this.blackjackClearPlayerHandsAndBets();\n            }\n            this.evaluateMove(currentPlayer, userData);\n            if (this.onLastPlayer()) {\n                this.set_gamePhase = \"acting\";\n                this.increase_turnCounter = 1;\n                this.blackjackAssignPlayerHands();\n                this._house.set_gameStatus = \"WaitingForActions\";\n                return;\n            }\n        }\n        if (this._gamePhase === \"acting\") {\n            this.evaluateMove(currentPlayer, userData);\n            if (this.allPlayerActionsResolved())\n                this.set_gamePhase = \"evaluateWinners\";\n        }\n        if (this._gamePhase === \"evaluateWinners\") {\n            this.evaluateMove(this._house, null);\n            if (this.playerActionsResolved(this._house))\n                this.set_gamePhase = \"roundOver\";\n        }\n        if (this._gamePhase === \"roundOver\") {\n            if (this.get_resultLog[this._roundConuter] === undefined) {\n                this.blackjackEvaluateAndGetRoundResults();\n            }\n            if (this._players[0].get_chips <= 0)\n                this._players[0].set_gameStatus = \"broke\";\n        }\n        this.increase_turnCounter = 1;\n    }\n    onFirstPlayer() {\n        if (this._turnCounter % this._players.length === 0)\n            return true;\n        else\n            return false;\n    }\n    onLastPlayer() {\n        if (this._turnCounter % this._players.length === this._players.length - 1)\n            return true;\n        else\n            return false;\n    }\n    playerActionsResolved(player) {\n        if (player.type === \"user\" || player.type === \"ai\") {\n            if (player.get_gameStatus === \"betting\" || player.get_gameStatus === \"bet\" || player.get_gameStatus === \"hit\") {\n                return false;\n            }\n        }\n        else {\n            if (this._house.get_gameStatus === \"WaitingForBets\" || this._house.get_gameStatus === \"WaitingForActions\" || this._house.get_gameStatus === \"betting\" || this._house.get_gameStatus === \"bet\" || this._house.get_gameStatus === \"hit\") {\n                return false;\n            }\n        }\n        return true;\n    }\n    allPlayerActionsResolved() {\n        for (let i = 0; i < this._players.length; i++) {\n            let currentPlayer = this._players[i];\n            if (currentPlayer.get_gameStatus === \"betting\" || currentPlayer.get_gameStatus === \"bet\" || currentPlayer.get_gameStatus === \"hit\") {\n                return false;\n            }\n        }\n        return true;\n    }\n    nextGame() {\n        this.set_gamePhase = \"betting\";\n        this.set_turnCounter = 0;\n        this._deck = new Deck_1.Deck(this._gameType);\n        this._deck.shuffle();\n        this._house.set_gameStatus = \"betting\";\n        for (let i = 0; i < this._players.length; i++) {\n            this._players[i].set_gameStatus = \"betting\";\n        }\n    }\n}\nexports.Table = Table;\n\n\n//# sourceURL=webpack://black-jack/./src/Model/Table.ts?");
    
    /***/ }),
    
    /***/ "./src/View/View.ts":
    /*!**************************!*\
      !*** ./src/View/View.ts ***!
      \**************************/
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
    
    eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.View = void 0;\nconst Controller_1 = __webpack_require__(/*! ../Controller/Controller */ \"./src/Controller/Controller.ts\");\nclass View {\n    static displayNone(page) {\n        page.classList.remove(\"d-block\");\n        page.classList.add(\"d-none\");\n    }\n    static displayBlock(page) {\n        page.classList.remove(\"d-none\");\n        page.classList.add(\"d-block\");\n    }\n    static renderLandingPage() {\n        if (View.target !== null) {\n            View.target.innerHTML =\n                `\n            <div id=\"landingPage\">\n                <div class=\"bg-green vh-100 d-flex justify-content-center align-items-center flex-column\">\n                    <h6 class=\"text-white\">Welcom to Card Game!</h6>\n                    <div class=\"form-group\">\n                        <input type=\"text\" placeholder=\"name\" class=\"form-control\" id=\"inputName\">\n                        <select class=\"form-select\" id=\"selectGameType\">\n                            <option value=\"blackjack\">Blackjack</option>\n                            <option value=\"poker\">Poker</option>\n                        </select>\n                                            \n                            <button class=\"btn btn-success form-control my-2\" id=\"startGame\">Start New Game</button>\n                            <button class=\"btn btn-outline-success form-control my-2\" id=\"loginGame\">Login</button>\n                    </div>\n                </div>\n            </div>\n            `;\n        }\n    }\n    static renderTablePage(table) {\n        if (View.target != null) {\n            let botsString = ``;\n            View.target.innerHTML = \"\";\n            for (let i = 1; i < table.get_players.length; i++) {\n                botsString += View.getPlayerString(table.get_players[i]);\n            }\n            View.target.innerHTML += View.getMenuBarString();\n            View.target.innerHTML += View.getBlackJackRuluString();\n            View.target.innerHTML += View.getResultLogString(table);\n            View.target.innerHTML +=\n                `\n                <div class=\"col-12\">\n                <!-- house -->\n                    <div id=\"house\">\n                        <div id=\"houseHands\" class=\"d-flex justify-content-center\">\n                         ${View.getPlayerString(table.get_house)}\n                        </div>\n                    </div><!-- houseEnd -->\n                    <div id=\"botsDiv\" class=\"d-flex justify-content-around\">\n                        ${botsString}\n                    </div>\n                </div> \n                <div id=\"userDiv\" class=\"d-flex justify-content-center\">\n                    ${View.getPlayerString(table.get_players[0])}\n                </div>\n            \n                `;\n            if (table.turnPlayer.type === \"user\") {\n                if (table.get_gamePhase === \"betting\") {\n                    View.target.innerHTML += View.getBetString();\n                    Controller_1.Controller.addBetsEvent(table);\n                    Controller_1.Controller.addBetSubmitEvent(table);\n                }\n                else if (table.get_gamePhase === \"acting\") {\n                    if (table.playerActionsResolved(table.turnPlayer)) {\n                        table.haveTurn(null);\n                        View.renderTablePage(table);\n                    }\n                    else {\n                        View.target.innerHTML += View.getActionString();\n                        Controller_1.Controller.addActionEvent(table);\n                    }\n                }\n                else if (table.get_gamePhase === \"evaluateWinners\") {\n                    table.haveTurn(null);\n                    View.renderTablePage(table);\n                }\n                else if (table.get_gamePhase === \"roundOver\") {\n                    table.increase_roundCounter = 1;\n                    let roundResults = document.querySelectorAll(\"#roundResults\")[0];\n                    View.displayBlock(roundResults);\n                    Controller_1.Controller.addCloseResultOrRuleEvent(table);\n                }\n                else if (table.get_gamePhase === \"stopOrContinue\") {\n                    View.target.innerHTML += View.getNextGameButtonStirng(table);\n                    if (table.get_players[0].get_gameStatus === \"broke\") {\n                        Controller_1.Controller.addNewGameEvent();\n                    }\n                    else {\n                        Controller_1.Controller.addStopOrContinueGameEvent(table);\n                    }\n                }\n            }\n            else {\n                setTimeout(function () {\n                    table.haveTurn(null);\n                    View.renderTablePage(table);\n                }, 1000);\n            }\n            Controller_1.Controller.addRuluAndLogCheckEvent();\n            Controller_1.Controller.addCloseResultOrRuleEvent(table);\n        }\n    }\n    static getCardString(card) {\n        let cardString = ``;\n        if (card === undefined) {\n            cardString +=\n                `\n                <div class=\"bg-white p-1 mx-1\">\n                      <div class=\"text-center\">\n                          <img src=\"./assets/img/questionMark.png\" alt=\"\" width=\"45\" height=\"45\">\n                      </div>\n                      <div class=\"text-center\">\n                          <p class=\"m-0\">?</p>\n                      </div>\n                  </div>\n            `;\n        }\n        else {\n            cardString +=\n                `\n                    <div class=\"bg-white p-1 mx-1\">\n                          <div class=\"text-center\">\n                              <img src=\"./assets/img/${card.suit}.png\" alt=\"\" width=\"45\" height=\"45\">\n                          </div>\n                          <div class=\"text-center\">\n                              <p class=\"m-0\">${card.rank}</p>\n                          </div>\n                      </div>\n                `;\n        }\n        return cardString;\n    }\n    static getMenuBarString() {\n        let menuBar = `\n                <nav class=\"navbar navbar-expand-md navbar-light bg-green p-0\">\n                    <div class=\"containuer-fluid\">\n                        <button class=\"navbar-toggler ms-1\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#menuBar\" aria-controls=\"menuBar\" aria-expanded=\"false\">\n                            <span class=\"navbar-toggler-icon\"></span>\n                        </button>\n                    </div>\n                    <div class=\"collapse navbar-collapse\" id=\"menuBar\">\n                        <ul class=\"navbar-nav me-auto ms-2\">\n                            <li class=\"nav-item\">\n                                <a class=\"nav-link text-white\" id=\"ruleButton\">Rule</a>\n                            </li>\n                            <li class=\"nav-item\">\n                                <a class=\"nav-link text-white\" id=\"gameLogButton\">GameLog</a>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n                `;\n        return menuBar;\n    }\n    static getPlayerString(player) {\n        let playerStatus = ``;\n        let playerHands = ``;\n        let len = 0;\n        if (player.type === \"house\" && (player.get_gameStatus === \"WaitingForBets\" || player.get_gameStatus === \"WaitingForActions\")) {\n            playerHands += View.getCardString(player.get_hand[0]);\n            playerStatus +=\n                `\n            <div class=\"playerStatus\">\n                  <div class=\"\">\n                      <h6 class=\"text-center text-white\">${player.get_name}</h6>\n                  </div>\n                  <div id=\"player1Infomation\" class=\"d-flex justify-content-around text-white \">\n                      <p>S: ${player.get_gameStatus}</p>\n                  </div>\n                  <div class=\"d-flex justify-content-center playerHands\">\n                        ${playerHands}\n                  </div> \n            </div>\n            `;\n        }\n        else if (player.type === \"house\") {\n            if (player.get_hand.length > 0) {\n                len = player.get_hand.length;\n            }\n            else {\n                len = 2;\n            }\n            for (let i = 0; i < len; i++) {\n                playerHands += View.getCardString(player.get_hand[i]);\n            }\n            playerStatus +=\n                `\n            <div class=\"playerStatus\">\n                  <div class=\"\">\n                      <h6 class=\"text-center text-white pt-2\">${player.get_name}</h6>\n                  </div>\n                  <div id=\"player1Infomation\" class=\"d-flex justify-content-around text-white \">\n                      <p>S: ${player.get_gameStatus}</p>\n                  </div>\n                  <div class=\"d-flex justify-content-center playerHands\">\n                        ${playerHands}\n                  </div> \n            </div>\n            `;\n        }\n        else {\n            if (player.get_hand.length > 0) {\n                len = player.get_hand.length;\n            }\n            else {\n                len = 2;\n            }\n            for (let i = 0; i < len; i++) {\n                playerHands += View.getCardString(player.get_hand[i]);\n            }\n            playerStatus +=\n                `\n            <div class=\"playerStatus\">\n                  <div class=\"\">\n                      <h6 class=\"text-center text-white\">${player.get_name}</h6>\n                  </div>\n                  <div id=\"player1Infomation\" class=\"d-flex justify-content-around text-white \">\n                      <p>S: ${player.get_gameStatus}</p>\n                      <p>B: ${player.get_bet}</p>\n                      <p>C: ${player.get_chips}</p>\n                  </div>\n                  <div class=\"d-flex justify-content-center playerHands\">\n                        ${playerHands}\n                  </div> \n            </div>\n            `;\n        }\n        return playerStatus;\n    }\n    static getBetString() {\n        let bet = ``;\n        bet +=\n            `\n            <div id=\"betDivs\" class=\"d-flex justify-content-around my-2 w-75 m-auto\">\n                <div>\n                    <p class=\"text-white text-center\">5</p>\n                    <div class=\"input-group\">\n                        <button class=\"btn btn-danger decreaseBets\">-</button>\n                        <input type=\"text\" value=\"0\" class=\"input-number text-center inputBets\" size=\"2\">\n                        <button class=\"btn btn-success increaseBets\">+</button>\n                    </div>\n                </div>\n                <div>\n                    <p class=\"text-white text-center\">20</p>\n                    <div class=\"input-group\">\n                        <button class=\"btn btn-danger decreaseBets\">-</button>\n                        <input type=\"text\" value=\"0\" class=\"input-number text-center inputBets\" size=\"2\">\n                        <button class=\"btn btn-success increaseBets\">+</button>\n                    </div>\n                </div>\n                <div>\n                <p class=\"text-white text-center\">50</p>\n                    <div class=\"input-group\">\n                        <button class=\"btn btn-danger decreaseBets\">-</button>\n                        <input type=\"text\" value=\"0\" class=\"input-number text-center inputBets\" size=\"2\">\n                        <button class=\"btn btn-success increaseBets\">+</button>\n                    </div>\n                </div>\n               <div>\n                    <p class=\"text-white text-center\">100</p>\n                    <div class=\"input-group\">\n                        <button class=\"btn btn-danger decreaseBets\">-</button>\n                        <input type=\"text\" value=\"0\" class=\"input-number text-center inputBets\" size=\"2\">\n                        <button class=\"btn btn-success increaseBets\">+</button>\n                    </div>\n                </div>\n                <div>\n                    <div class=\"d-flex justify-content-center mt-4\">\n                        <button id=\"submitBetsButton\" class=\"btn btn-success\">Submit your bet</button>\n                    </div>\n                </div>\n            </div>\n            \n            `;\n        return bet;\n    }\n    static getActionString() {\n        let actionString = ``;\n        actionString +=\n            `\n            <div id=\"playerAction\">\n                <div class=\"d-flex justify-content-center p-2\">\n                    <button id=\"surrender\" class=\"col-2 col-lg-1 btn btn-light mx-1 actionButton\" value =\"surrender\">Surrender</button>\n                    <button class=\"col-2 col-lg-1 btn btn-success mx-1 actionButton\" value=\"stand\">Stand</button>\n                    <button class=\"col-2 col-lg-1 btn btn-warning mx-1 actionButton\" value=\"hit\">Hit</button>\n                    <button id=\"double\" class=\"col-2 col-lg-1 btn btn-danger mx-1 actionButton \" value=\"double\">Double</button>\n                </div>\n            </div>\n            `;\n        return actionString;\n    }\n    static getResultLogString(table) {\n        let resultList = \"\";\n        if (table.get_resultLog.length === 0) {\n            resultList = \"No result\";\n        }\n        else {\n            for (let i = 0; i < table.get_resultLog.length; i++) {\n                resultList +=\n                    `\n                    <li class=\"list-group-item\">\n                        <h5>Round ${i + 1}</h5>\n                        <p>${table.get_resultLog[i]}</p>\n                    </li>\n                    `;\n            }\n        }\n        let result = `\n                <div id=\"roundResults\" class=\"position-absolute top-50 start-50 translate-middle w-50 d-none\" style=\"z-index: 10;\">\n                    <div class=\"card text-center max-\">\n                        <div class=\"card-header\">Log</div>\n                        <div class=\"card-body\">\n                            <div class=\"overflow-auto\" style=\"max-height: 150px;\">\n                                <ul class=\"list-group list-group-flush\">\n                                    ${resultList}\n                                </ul>                        \n                            </div>\n                            <a id=\"closeResults\" class=\"card-link\">close</a>\n                        </div>\n                    </div>\n                </div>\n            `;\n        return result;\n    }\n    static getBlackJackRuluString() {\n        let gameRuluString = \"\";\n        gameRuluString =\n            `\n            <div id=\"gameRule\" class=\"d-flex m-3 pe-3  col-11 position-absolute top-0 start-0 bg-secondary d-none\" style=\"z-index: 10;\">\n                <div class=\"col-2\">\n                    <div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n                        <a class=\"list-group-item list-group-item-action active\" id=\"list-overview-list\"\n                            data-bs-toggle=\"list\" href=\"#list-overview\" role=\"tab\" aria-controls=\"list-overview\">ゲームの概要</a>\n                        <a class=\"list-group-item list-group-item-action\" id=\"list-flow-list\" data-bs-toggle=\"list\"\n                            href=\"#list-flow\" role=\"tab\" aria-controls=\"list-flow\">ゲームの流れ</a>\n                        <a class=\"list-group-item list-group-item-action\" id=\"list-nubmerCount-list\" data-bs-toggle=\"list\"\n                            href=\"#list-nubmerCount\" role=\"tab\" aria-controls=\"list-nubmerCount\">数の数え方</a>\n                    </div>\n                </div>\n                <div class=\"col-6\">\n                    <div class=\"tab-content text-white f-90\" id=\"nav-tabContent\">\n                        <div class=\"tab-pane fade show active\" id=\"list-overview\" role=\"tabpanel\"\n                            aria-labelledby=\"list-overview-list\">\n                            <p class=\"p-2\">\n                                Houseと一対一で勝負します。自分の持っているカードとHouseの持っているカードの合計値を比べて合計値の大きいほうが勝利となります。しかし、合計値が21を超えてはいけません。21を超えた時点でbust(負け)となってしまいます。\n                            </p>\n                        </div>\n                        <div class=\"tab-pane fade\" id=\"list-flow\" role=\"tabpanel\" aria-labelledby=\"list-flow-list\">\n                            <div class=\"p-2\">\n                                <ol>\n                                    <li>\n                                        <h6>ベット</h6>\n                                        <p>ゲームが始まる前に1ゲームで賭ける金額を決めます。</p>\n                                    </li>\n                                    <li>\n                                        <h6>アクション</h6>\n                                        <p>各プレイヤーは与えられた手札でさまざまなアクションをとることができます。</p>\n                                        <ul>\n                                            <li class=\"text-info\">Surrender</li>\n                                            <p class=\"py-1\">最初に配られたカードを見て、その時点で自ら負けを認めること。サレンダーした場合かけた金額の半分がもどってきます。</p>\n                                            <li class=\"text-info\">Stand</li>\n                                            <p class=\"py-1\">今持っているカードで勝負することを宣言します。</p>\n                                            <li class=\"text-info\">Hit</li>\n                                            <p class=\"py-1\">現在の手札にさらに一枚追加します。手札の合計値が21をしまった時点でそのプレイヤーはbust(負け)となります。</p>\n                                            <li class=\"text-info\">Double</li>\n                                            <p class=\"py-1\">\n                                                ベットを2倍にして、もう一枚カードを追加します。手札の合計値が21をしまった時点でそのプレイヤーはbust(負け)となります。このアクションは最初にカードが配られた後にしか行うことができません。\n                                            </p>\n                                        </ul>\n                                    </li>\n                                    <li>\n                                        <h6>評価</h6>\n                                        <p>すべてのプレイヤーがアクションを行えなくなった時点で、残ったプレイヤーとHouseの手札を比較し勝ち負けを判定します。評価に沿ってプレイヤーのチップを変動します。</p>\n                                    </li>\n                                </ol>\n                            </div>\n                        </div>\n                        <div class=\"tab-pane fade\" id=\"list-nubmerCount\" role=\"tabpanel\"\n                            aria-labelledby=\"list-nubmerCount-list\">\n                            \n                                <ul>\n                                    <li class=\"text-info\">A</li>\n                                    <p class=\"py-1\">Aは1または,11としてカウントします。プレイヤーの都合のいいほうで数えることができます。</p>\n                                    <li class=\"text-info\">J, Q, K</li>\n                                    <p class=\"py-1\">J,Q,Kはすべて10としてカウントします。</p>\n                                    <li class=\"text-info\">それ以外(2～10)</li>\n                                    <p class=\"py-1\">それ以外のカードはそのままの値でカウントします。</p>\n                                    <li class=\"text-info\">A+10(J, Q, Kを含む)の組み合わせ場合</li>\n                                    <p>プレイヤーの手札が2枚でA+10(J, Q, Kを含む)だったときをblackjackと呼びます。これはほかのblackjack以外の手札を打ち負かすことができます。例えば(2,\n                                        9, K)のようにカードの合計値が同じであった場合でも勝利することができます。</p>\n                                </ul>\n                            <div>\n                                    <p>例.1</p>\n                                    <div class=\"d-flex\">\n                                        <div class=\"bg-white m-1\">\n                                            <div class=\"text-center\">\n                                                <img src=\"./assets/img/heart.png\" alt=\"\" width=\"45\" height=\"45\">\n                                            </div>\n                                            <div class=\"text-center\">\n                                                <p class=\"m-0 text-dark\">A</p>\n                                            </div>\n                                        </div>\n                                        <div class=\"bg-white m-1\">\n                                            <div class=\"text-center\">\n                                                <img src=\"./assets/img/diamond.png\" alt=\"\" width=\"45\" height=\"45\">\n                                            </div>\n                                            <div class=\"text-center\">\n                                                <p class=\"m-0 text-dark\">8</p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                <p>11 + 8 = 19</p>\n                                <p>例.2</p>\n                                <div class=\"d-flex\">\n                                    <div class=\"bg-white m-1\">\n                                        <div class=\"text-center\">\n                                            <img src=\"./assets/img/spade.png\" alt=\"\" width=\"45\" height=\"45\">\n                                        </div>\n                                        <div class=\"text-center\">\n                                            <p class=\"m-0 text-dark\">A</p>\n                                        </div>\n                                    </div>\n                                    <div class=\"bg-white m-1\">\n                                        <div class=\"text-center\">\n                                            <img src=\"./assets/img/clover.png\" alt=\"\" width=\"45\" height=\"45\">\n                                        </div>\n                                        <div class=\"text-center\">\n                                            <p class=\"m-0 text-dark\">K</p>\n                                        </div>\n                                    </div>\n                                </div>\n                                <p>blackjack</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <a id=\"closeRule\" type=\"button\" class=\"ms-auto text-danger text-center\">close</a>\n            </div>\n    \n    \n                `;\n        return gameRuluString;\n    }\n    static getNextGameButtonStirng(table) {\n        let nextButton = \"\";\n        if (table.get_players[0].get_gameStatus === \"broke\") {\n            nextButton =\n                `\n                <div class=\"position-absolute top-50 start-50 translate-middle-x w-50\">\n                    <div class=\"card text-center\">\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title text-center\">Game Over</h5>\n                            <div class=\"p-2\">\n                                <button id=\"newGameButton\" class=\"btn btn-success mx-3\">New Game</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                `;\n        }\n        else {\n            nextButton =\n                `\n                <div class=\"position-absolute top-50 start-50 translate-middle-x w-50\">\n                    <div class=\"card text-center\">\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\">Are you continue?</h5>\n                            <div class=\"d-flex justify-content-around p-2\">\n                                <button id=\"stopGameButton\" class=\"btn btn-danger\">Stop Game</button>\n                                <button id=\"continueGameButton\" class=\"btn btn-primary\">Continue Game</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                `;\n        }\n        return nextButton;\n    }\n}\nexports.View = View;\nView.target = document.getElementById(\"target\");\n\n\n//# sourceURL=webpack://black-jack/./src/View/View.ts?");
    
    /***/ }),
    
    /***/ "./src/app.ts":
    /*!********************!*\
      !*** ./src/app.ts ***!
      \********************/
    /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
    
    eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst Controller_1 = __webpack_require__(/*! ./Controller/Controller */ \"./src/Controller/Controller.ts\");\nController_1.Controller.startGame();\n\n\n//# sourceURL=webpack://black-jack/./src/app.ts?");
    
    /***/ })
    
    /******/ 	});
    /************************************************************************/
    /******/ 	// The module cache
    /******/ 	var __webpack_module_cache__ = {};
    /******/ 	
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/ 		// Check if module is in cache
    /******/ 		var cachedModule = __webpack_module_cache__[moduleId];
    /******/ 		if (cachedModule !== undefined) {
    /******/ 			return cachedModule.exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = __webpack_module_cache__[moduleId] = {
    /******/ 			// no module.id needed
    /******/ 			// no module.loaded needed
    /******/ 			exports: {}
    /******/ 		};
    /******/ 	
    /******/ 		// Execute the module function
    /******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
    /******/ 	
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/ 	
    /************************************************************************/
    /******/ 	
    /******/ 	// startup
    /******/ 	// Load entry module and return exports
    /******/ 	// This entry module can't be inlined because the eval devtool is used.
    /******/ 	var __webpack_exports__ = __webpack_require__("./src/app.ts");
    /******/ 	
    /******/ })()
    ;
    